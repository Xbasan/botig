import openpyxl
import random
import datetime
import telebot
from telebot import types, TeleBot
from telebot.types import InputFile
from PIL import Image, ImageDraw, ImageFont

bot: TeleBot = telebot.TeleBot('–∫–ª—é—á –±–æ—Ç–∞')

workbook = openpyxl.open('main.xlsx')

sheep = workbook.worksheets[0]

def random_emoticon():
    emoticon_arr = ['üòÄ', 'üëèüèª', 'üòÇ', 'üò≠', 'üëç', 'üòò', 'ü§ù', 'ü§£', 'ü§¨', '‚ù§Ô∏è', 'üòç', 'üòä', 'üòÅ', '‚ò∫Ô∏è', 'üòî', 'üôà', 'üòÑ', 'üòí', 'üòú', 'üòé']
    emoticon = random.choice(emoticon_arr)
    return emoticon


def adding_background_schedule(message):
    image = Image.open("img1.png")

    font = ImageFont.truetype("arial.ttf", 42)
    drawer = ImageDraw.Draw(image)
    drawer.text((25, 200), f'{message}', font=font, fill='white')

    image.save('new_img.png')


def show_date_and_weekday():
    weekdays = {
        0: '–ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫',
        1: '–í—Ç–æ—Ä–Ω–∏–∫',
        2: '–°—Ä–µ–¥–∞',
        3: '–ß–µ—Ç–≤–µ—Ä–≥',
        4: '–ü—è—Ç–Ω–∏—Ü–∞',
        5: '–°—É–±–±–æ—Ç–∞',
        6: '–í–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ'
    }

    current_date = datetime.date.today()
    weekday = current_date.weekday()

    return weekdays[weekday]


def preparing_message(first_name, day_of_the_week):
    schedule_for_today = f'{first_name} c–µ–≥–æ–¥–Ω—è {datetime.date.today().strftime("%d.%m.%y")} {show_date_and_weekday()}\n'

    cells = sheep[day_of_the_week[show_date_and_weekday()]]
    i = 2

    for article, armorer in cells:
        if armorer.value is None and article.value is not None:
            if i == 2:
                schedule_for_today = f'{schedule_for_today}\n {article.value}\n'
        elif article.value is None:
            pass
        else:
            if i == 2:
                schedule_for_today = f'{schedule_for_today}\n {article.value} |[{armorer.value}]|'
                i = 1
            else:
                i = 2

    return schedule_for_today


def n12131(first_name):
    day_of_the_week = {
        '–ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫': 'G7:H19',
        '–í—Ç–æ—Ä–Ω–∏–∫': 'G20:H31',
        '–°—Ä–µ–¥–∞': 'G32:H43',
        '–ß–µ—Ç–≤–µ—Ä–≥': 'G44:H55',
        '–ü—è—Ç–Ω–∏—Ü–∞': 'G56:H67',
        '–°—É–±–±–æ—Ç–∞': 'G7 :H19',
        '–í–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ': 'G7:H91'
    }
    return preparing_message(first_name, day_of_the_week)


def n12132(first_name):
    day_of_the_week = {
        '–ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫': 'I7:J19',
        '–í—Ç–æ—Ä–Ω–∏–∫': 'I20:J31',
        '–°—Ä–µ–¥–∞': 'I32:J43',
        '–ß–µ—Ç–≤–µ—Ä–≥': 'I44:J55',
        '–ü—è—Ç–Ω–∏—Ü–∞': 'I56:J67',
        '–°—É–±–±–æ—Ç–∞': 'I80:J91',
        '–í–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ': 'I7:J91'
    }
    return preparing_message(first_name, day_of_the_week)


@bot.message_handler(commands=['start'])
def bot_start(message):
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    btn_1 = types.KeyboardButton('–ò12131')
    btn_2 = types.KeyboardButton('–ò12132')
    btn_3 = types.KeyboardButton('–Ω–µ—Ç –º–æ–µ–π –≥—Ä—É–ø–ø—ã')
    btn_4 = types.KeyboardButton('–ø–æ—Ä–µ–∫–æ–º–µ–Ω–¥—É–π —á—Ç–æ –Ω–∏–±—É–¥—å')
    markup.add(btn_1, btn_2, btn_3, btn_4)
    bot.send_message(message.chat.id, f'–í—ã–±–µ—Ä–∏ —Å–≤–æ—é –≥—Ä—É–ø–ø—É'.format(message.from_user), reply_markup=markup)


@bot.message_handler(content_types=['text'])
def bott(message):
    first_name = message.from_user.first_name
    message_text =message.text
    match message_text:
        case '–ò12131':
            adding_background_schedule(n12131(first_name))
            photo = InputFile("new_img.png")
            bot.send_photo(chat_id=message.chat.id, photo=photo, caption=random_emoticon())
        case '–ò12132':
            adding_background_schedule(n12132(first_name))
            photo = InputFile("new_img.png")
            bot.send_photo(chat_id=message.chat.id, photo=photo, caption=random_emoticon())
        case '–Ω–µ—Ç –º–æ–µ–π –≥—Ä—É–ø–ø—ã':
            bot.reply_to(message, text=f'–ù–∞–ø–∏—à–∏ –µ–º—É <a href="https://t.me/Xbasan">–•–∞—Å–∞–Ω</a> –æ–Ω –¥–æ–±–∞–≤–∏—Ç', parse_mode='html')
        case '–ø–æ—Ä–µ–∫–æ–º–µ–Ω–¥—É–π —á—Ç–æ –Ω–∏–±—É–¥—å':
            bot.reply_to(message, text='<a href="https://jut.su/oneepiece/film-1.html"><em>—Ä–µ–∫–æ–º–µ–Ω–¥—É—é</em></a>', parse_mode='html')
        case _:
            bot.reply_to(message, text=f'—á—Ç–æ')


if __name__ == '__main__':
    print('-|-')
    bot.polling(none_stop=True, interval=0)
